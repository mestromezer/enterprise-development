@page "/pharmacies"
@using global::Pharmacies.Client.OpenApiService
@inject IPharmaciesApiWrapper ApiWrapper

<h3>Аптеки</h3>

<button class="btn btn-primary" @onclick="ShowCreatePharmacyModal">Добавить запись</button>

@if (PharmaciesList != null)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Номер аптеки</th>
                <th>Название</th>
                <th>Номер телефона</th>
                <th>Адрес</th>
                <th>ФИО Директора</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pharmacy in PharmaciesList)
            {
                <tr>
                    <td>@pharmacy.Number</td>
                    <td>@pharmacy.Name</td>
                    <td>@pharmacy.Phone</td>
                    <td>@pharmacy.Address</td>
                    <td>@pharmacy.DirectorFullName</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ShowEditPharmacyModal(pharmacy)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => DeletePharmacy(pharmacy.Number)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Create Pharmacy Modal -->
<EditForm Model="createPharmacy" OnValidSubmit="CreatePharmacyHandler">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="modal" tabindex="-1" style="display: @(isCreateModalVisible ? "block" : "none")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Pharmacy</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="createNumber">Номер аптеки</label>
                        <InputNumber id="createNumber" class="form-control" @bind-Value="createPharmacy.Number" />
                    </div>
                    <div class="mb-3">
                        <label for="createName">Название</label>
                        <InputText id="createName" class="form-control" @bind-Value="createPharmacy.Name" />
                    </div>
                    <div class="mb-3">
                        <label for="createPhone">Номер телефона</label>
                        <InputText id="createPhone" class="form-control" @bind-Value="createPharmacy.Phone" />
                    </div>
                    <div class="mb-3">
                        <label for="createAddress">Адрес</label>
                        <InputText id="createAddress" class="form-control" @bind-Value="createPharmacy.Address" />
                    </div>
                    <div class="mb-3">
                        <label for="createDirector">ФИО Директора</label>
                        <InputText id="createDirector" class="form-control" @bind-Value="createPharmacy.DirectorFullName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateModal">Отмена</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<!-- Edit Pharmacy Modal -->
<EditForm Model="editPharmacy" OnValidSubmit="EditPharmacyHandler">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="modal" tabindex="-1" style="display: @(isEditModalVisible ? "block" : "none")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Pharmacy</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editNumber">Номер аптеки</label>
                        <InputNumber id="editNumber" class="form-control" @bind-Value="editPharmacy.Number" />
                    </div>
                    <div class="mb-3">
                        <label for="editName">Название</label>
                        <InputText id="editName" class="form-control" @bind-Value="editPharmacy.Name" />
                    </div>
                    <div class="mb-3">
                        <label for="editPhone">Номер телефона</label>
                        <InputText id="editPhone" class="form-control" @bind-Value="editPharmacy.Phone" />
                    </div>
                    <div class="mb-3">
                        <label for="editAddress">Адрес</label>
                        <InputText id="editAddress" class="form-control" @bind-Value="editPharmacy.Address" />
                    </div>
                    <div class="mb-3">
                        <label for="editDirector">ФИО Директора</label>
                        <InputText id="editDirector" class="form-control" @bind-Value="editPharmacy.DirectorFullName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Отмена</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private IList<PharmacyDto>? PharmaciesList { get; set; }
    private PharmacyDto createPharmacy = new PharmacyDto();
    private PharmacyDto editPharmacy = new PharmacyDto();
    private bool isCreateModalVisible = false;
    private bool isEditModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        PharmaciesList = await ApiWrapper.GetAllPharmacies();
    }

    private void ShowCreatePharmacyModal()
    {
        createPharmacy = new PharmacyDto();
        isCreateModalVisible = true;
    }

    private void ShowEditPharmacyModal(PharmacyDto pharmacy)
    {
        editPharmacy = pharmacy;
        isEditModalVisible = true;
    }

    private void CloseCreateModal()
    {
        isCreateModalVisible = false;
        createPharmacy = new PharmacyDto();
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
        editPharmacy = new PharmacyDto();
    }

    private async Task CreatePharmacyHandler()
    {
        await ApiWrapper.CreatePharmacy(createPharmacy);
        PharmaciesList = await ApiWrapper.GetAllPharmacies();
        CloseCreateModal();
    }

    private async Task EditPharmacyHandler()
    {
        await ApiWrapper.UpdatePharmacy(editPharmacy.Number, editPharmacy);
        PharmaciesList = await ApiWrapper.GetAllPharmacies();
        CloseEditModal();
    }

    private async Task DeletePharmacy(int pharmacyNumber)
    {
        await ApiWrapper.DeletePharmacy(pharmacyNumber);
        PharmaciesList = await ApiWrapper.GetAllPharmacies();
    }
}
