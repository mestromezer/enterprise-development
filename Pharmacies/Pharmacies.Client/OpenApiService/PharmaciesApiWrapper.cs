using Pharmacies.Client;
namespace Pharmacies.Client.OpenApiService;

public class PharmaciesApiWrapper(IConfiguration configuration) : IPharmaciesApiWrapper
{
    public readonly HostAutogeneratedClient _client = new(configuration["OpenApi:ServerUrl"], new HttpClient());

    public async Task<PharmacyDto> CreatePharmacy(PharmacyDto newPharmacy) => await _client.PharmaciesPOSTAsync(newPharmacy);

    public async Task<PositionDto> CreatePosition(PositionDto newPosition) => await _client.PositionsPOSTAsync(newPosition);

    public async Task<PriceDto> CreatePrice(PriceDto newPrice) => await _client.PricesPOSTAsync(newPrice);

    public async Task DeletePharmacy(int id) => await _client.PricesDELETEAsync(id);

    public async Task DeletePosition(int id) => await _client.PositionsDELETEAsync(id);

    public async Task DeletePrice(int id) => await _client.PricesDELETEAsync(id);

    public async Task<IList<PharmacyDto>> GetAllPharmacies() => [.. await _client.PharmaciesAllAsync()];

    public async Task<IList<PositionDto>> GetAllPositions() => [.. await _client.PositionsAllAsync()];

    public async Task<IList<PriceDto>> GetAllPrices() => [.. await _client.PricesAllAsync()];

    public async Task<PharmacyDto> GetPharmacy(int id) => await _client.PharmaciesGETAsync(id);

    public async Task<PositionDto> GetPosition(int id) => await _client.PositionsGETAsync(id);

    public async Task<PriceDto> GetPrice(int id) => await _client.PricesGETAsync(id);

    public async Task UpdatePharmacy(int id, PharmacyDto newPharmacy) => await _client.PharmaciesPUTAsync(id, newPharmacy);

    public async Task UpdatePosition(int id, PositionDto newPosition) => await _client.PositionsPUTAsync(id, newPosition);

    public async Task UpdatePrice(int id, PriceDto newPrice) => await _client.PricesPUTAsync(id, newPrice);
}
